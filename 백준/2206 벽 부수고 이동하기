import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main {

    static int[][] miro;
    static Queue<int[]> q = new LinkedList<>();
    static boolean visited[][][];
    static int N;
    static int M;
    static int answer = -1;

    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, 1, 0, -1};

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] inputs;

        inputs = br.readLine().split(" ");

        N = Integer.parseInt(inputs[0]);
        M = Integer.parseInt(inputs[1]);

        miro = new int[N][M];
        visited = new boolean[N][M][2];

        for (int i = 0; i < N; i++) {
            inputs = br.readLine().split("");
            for (int j = 0; j < M; j++) {
                miro[i][j] = Integer.parseInt(inputs[j]);
            }
        }
        q.add(new int[]{0, 0, 1, 1});
        visited[0][0][0] = true;
        bfs();

        System.out.println(answer);
    }

    private static void bfs() {

        while (!q.isEmpty()) {
            int[] node = q.poll();

            int x = node[0];
            int y = node[1];
            int value = node[2];
            int pass = node[3];
            if (x == N - 1 && y == M - 1) {// 목표에 도착하면 종료
                answer = value;
                break;
            }

            // queueing
            for (int i = 0; i < 4; i++) {
                int mx = x + dx[i];
                int my = y + dy[i];
//                if (isRange(mx, my)) {
                if(mx >= 0 && my >= 0 && mx < N && my < M){
                    if (pass == 1) { // 패스권이 잇을 때
                        if (miro[mx][my] == 1 && !visited[mx][my][1]) {
                            visited[mx][my][1] = true;
                            q.add(new int[]{mx, my, value + 1, 0});
                        } else if (miro[mx][my] == 0 && !visited[mx][my][1]) {
                            visited[mx][my][1] = true;
                            q.add(new int[]{mx, my, value + 1, 1});
                        }
                    } else {
                        if (miro[mx][my] == 0 && !visited[mx][my][0]) {
                            visited[mx][my][0] = true;
                            q.add(new int[]{mx, my, value + 1, pass});
                        }
                    }
                }
            }
        }
    }

//    private static boolean isRange(int x, int y) {
//        return x >= 0 && y >= 0 && x < N && y < M;
//    }
}
