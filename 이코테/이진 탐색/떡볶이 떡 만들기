// 딱 맞아 떨어지는 값을 구하는게아니라, 어떤 조건을 만족하는 최소의 수를 구하는 것. -> 파라메트릭 서치 문제 유형
// 이진 탐색을 사용할 때,
// 1. 재귀 vs 반복문
// 2. index 를 활용할지, 배열의 원소값을 활용할지
// 이 두가지를 생각하고 문제해결에 접근해야겠다.
// 또한 이진 탐색의 종료 조건을 start, end 를 이용해서 종료조건을 설정해주는 것을 생각해야겠다.
// 맞아 떨어지는 값이면 그 즉시 종료를 하면 되는데, 이와 같이 조건에 맞는 최소 or 최댓값 구하는 경우에는 start, end 로 모두 탐색을 하고난 후 종료시켜주는게 중요한것 같다.

import java.io.*;
import java.util.*;

public class Solution {
    public int solution(int number, int guest, int [] heights){
        int answer = 0;
        Arrays.sort(heights);
        int max = heights[heights.length-1];
        int start = 0;
        int end = max;
        int cnt = 0;
        while(start <= end){
            System.out.println("cnt = " + cnt++);
            int sum = 0;
            int mid = (start + end) / 2;
            for(int h : heights){
                if(h-mid > 0)
                    sum = sum + h-mid;
            }
            if(sum >= guest) {// 많이 잘랐을 때
                answer = mid;
                start = mid + 1;
            }
            else if (sum < guest) // 적게 잘랐을 때
                end = mid - 1;
        }
        return answer;
    }
}

// 1년만에 다시 
import java.util.ArrayList;
import java.util.List;

class Solution {
    int answer;

    public int solution(int goal, int[] lengths) {
        answer = 0;
        int max = 0;
        for (int i : lengths) {
            max = Math.max(max, i);
        }
        binary_search(0, max, lengths, goal);
        return answer;
    }

    public void binary_search(int start, int end, int[] lengths, int goal) {
        while(start <= end) {
            int mid = (start + end) / 2;

            System.out.println(start+" "+end+" "+mid);
            if(check(mid,lengths) < goal){ // 떡을 잘랐는데, 목표 길이보다 짧음. 즉 너무 적게 짤랐을때
                end = mid;
            } else if (check(mid, lengths) > goal){
                start = mid;
            } else {
                answer = mid;
                break;
            }
        }
    }

    public int check(int value, int[] lengths) {
        int sum = 0;
        for (int i : lengths) {
            if(i-value >= 0)
                sum += i - value;
        }
        return sum;
    }

    public static void main(String[] args) {
        Solution s = new Solution();
        int goal = 6;
        int[] lengths = {19, 15, 10, 17};
        int answer = s.solution(goal, lengths);
        System.out.println("답 " + answer);
    }
}
